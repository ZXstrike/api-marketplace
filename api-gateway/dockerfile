# ---- Build Stage ----
# Use a specific Go version for reproducible builds
FROM golang:1.24-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy dependency files and download them.
# This step is cached and only runs when go.mod or go.sum changes.
COPY go.mod go.sum ./
RUN go mod download

# Copy the rest of the source code
COPY . .

# Build the Go application, creating a static binary.
# The output binary is named "app" and we point the build to our main package in ./cmd
RUN CGO_ENABLED=0 GOOS=linux go build -ldflags="-w -s" -o app ./cmd

# ---- Final Stage ----
# Use a minimal, non-root alpine image for the final container
FROM alpine:latest

# Set the working directory
WORKDIR /app

# Create a non-root user and group for security
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

# Switch to the non-root user
USER appuser

# Copy only the compiled binary from the builder stage
COPY --from=builder /app/app .

# Expose the port the application will run on (e.g., 8080)
EXPOSE 8080

# The command to run the application
CMD ["./app"]